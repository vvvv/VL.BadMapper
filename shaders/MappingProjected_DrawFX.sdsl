[Summary("Draws the content without softedges onto a mesh, with projected texture.")]
shader MappingProjected_DrawFX : VS_PS_Base, Texturing, Camera
{
    float4x4 TextureTransformation;
    stream float4 TransformedTextureCoord;
    float2 ViewportSize = ViewSize;
    
    float Gamma = 1;
    
    bool CompensateLightFalloff;
    float GlobalLightCompensation = 1.0f;
    float GlobalAlpha = 1.0f;

    override stage void VSMain()
    {    
        streams.ShadingPosition = mul(streams.Position, WorldViewProjection);
        float4 TexC = mul(streams.Position, World);
        streams.TransformedTextureCoord = mul(TexC, TextureTransformation);
    }

    override stage void PSMain()     
    {           
        float alpha = 1.0f;
       
        if (CompensateLightFalloff)
        {
            float2 texel = streams.TexCoord.xy * ViewportSize.xy;
            float2 texelU = ddx(texel);
            float2 texelV = ddy(texel);
            float size = length(texelU) * length(texelV);
            alpha *= size * GlobalLightCompensation;
        }
       
        alpha = pow(alpha, Gamma);

        streams.TransformedTextureCoord /= streams.TransformedTextureCoord.w;
        float2 TexC = streams.TransformedTextureCoord;

        // below: kill all color outside of original texture.
        if (TexC.x < 0 || TexC.y < 0 || TexC.x > 1 || TexC.y > 1)
        {
            streams.ColorTarget = 0;
        }
        else
        {
            float4 content = Texture0.Sample(LinearSampler, TexC);
            streams.ColorTarget = float4(content.rgb*alpha*GlobalAlpha,1);
        }
    }
};